# -*- coding: utf-8 -*-

"""
youtubeapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from youtubeapi.api_helper import APIHelper
from youtubeapi.configuration import Server
from youtubeapi.controllers.base_controller import BaseController
from youtubeapi.exceptions.api_exception import APIException


class SearchQueriesController(BaseController):

    """A Controller to access Endpoints in the youtubeapi API."""
    def __init__(self, config, auth_managers):
        super(SearchQueriesController, self).__init__(config, auth_managers)

    def search(self,
               part,
               q):
        """Does a GET request to /.

        TODO: type endpoint description here.

        Args:
            part (string): The part parameter specifies a comma-separated list
                of one or more search resource properties that the API
                response will include. Set the parameter value to snippet.
            q (string): The q parameter specifies the query term to search
                for.  Your request can also use the Boolean NOT (-) and OR (|)
                operators to exclude videos or to find videos that are
                associated with one of several search terms. For example, to
                search for videos matching either "boating" or "sailing", set
                the q parameter value to boating|sailing. Similarly, to search
                for videos matching either "boating" or "sailing" but not
                "fishing", set the q parameter value to boating|sailing
                -fishing. Note that the pipe character must be URL-escaped
                when it is sent in your API request. The URL-escaped value for
                the pipe character is %7C.

        Returns:
            string: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'part': part,
            'q': q
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 404:
            raise APIException('There was a problem in your input.', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded
